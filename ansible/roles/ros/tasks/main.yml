
- name: set up ros keys
  tags:
    - ros_installation
  ansible.builtin.apt_key:
    url: https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc
    state: present

- name: accept software from packages.ros.org
  tags:
    - ros_installation
  apt_repository:
    repo: 'deb http://packages.ros.org/ros/ubuntu focal main'
    filename: 'ros-latest'
    update_cache: yes

- name: install ros-base package
  tags:
    - ros_installation
  apt:
    update_cache: yes
    name: "ros-{{ ros_version }}-ros-base"

- name: install ros packages
  tags:
    - ros_installation
  apt:
    update_cache: yes
    name: "ros-{{ ros_version }}-{{ item }}"
  with_items: "{{ ros_extra_packages }}"

- name: Add ros to .bashrc
  tags:
    - ros_installation
  become_user: "{{ ansible_user }}"
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: "source /opt/ros/{{ ros_version }}/setup.bash"
    owner: "{{ ansible_user }}"
    mode: '0644'

- name: Add ros to .zshrc
  tags:
    - ros_installation
  become_user: "{{ ansible_user }}"
  lineinfile:
    path: "/home/{{ ansible_user }}/.zshrc"
    line: "source /opt/ros/{{ ros_version }}/setup.zsh"
    owner: "{{ ansible_user }}"
    mode: '0644'

- name: install ros build dependencies
  tags:
    - ros_installation
  ansible.builtin.package:
    update_cache: yes
    name:
      - python3-rosdep
      - python3-rosinstall
      - python3-rosinstall-generator
      - python3-wstool
      - build-essential

- name: initialize rosdep
  tags:
    - ros_installation
  ansible.builtin.command:
    cmd: rosdep init
    creates: /etc/ros/rosdep/sources.list.d/20-default.list

- name: update rosdep
  tags:
    - ros_installation
  become_user: "{{ ansible_user }}"
  ansible.builtin.command:
    cmd: rosdep update
    creates: "/home/{{ ansible_user }}/.ros/rosdep/"

- name: update /opt/ros/NAME permissions
  tags:
    - ros_installation
  ansible.builtin.file:
    path: "/opt/ros/{{ ros_version }}"
    state: directory
    mode: '0755'
    recurse: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: create catking_ws dir
  tags:
    - ros_workspace_initialization
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/catkin_ws/src"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: create_workspace

- name: initialize catkin_ws
  tags:
    - ros_workspace_initialization
  become_user: "{{ ansible_user }}"
  ansible.builtin.command:
    chdir: "/home/{{ ansible_user }}/catkin_ws"
    cmd: "bash -ce \"source /opt/ros/{{ ros_version }}/setup.bash; catkin_make\""
    creates: "/home/{{ ansible_user }}/catkin_ws/devel/setup.bash"
  when: create_workspace

- name: clone platform sources
  tags:
    - ros_update
  become_user: "{{ ansible_user }}"
  ansible.builtin.git:
    repo: '{{ arduino_platform_url }}'
    dest: "/home/{{ ansible_user }}/catkin_ws/src/ArduinoPlatformController"
    force: yes
    version: master
    accept_hostkey: yes
  notify:
    - build and install catkin_ws
  when: manage_platform_sources

- name: place ros.service
  tags:
    - ros_update
  ansible.builtin.template:
    src: ros.service.j2
    dest: /etc/systemd/system/ros.service
    owner: root
    group: root
    mode: "0640"
  notify:
    - systemctl daemon-reload
    - restart ros service
  when: manage_platform_sources

- name: Add IP address of all hosts to all hosts
  tags:
    - ros_etc_hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{{ hostvars[item].ansible_host }} {{item}}"
    state: present
  when: hostvars[item].ansible_host is defined and manage_etc_hosts
  with_items: "{{ groups.all }}"